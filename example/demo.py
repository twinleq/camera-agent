#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Camera Agent –¥–ª—è IP-–∫–∞–º–µ—Ä
"""
import asyncio
import json
import time
from typing import Dict, Any
import argparse

from pathlib import Path
import sys

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –∞–≥–µ–Ω—Ç—É
sys.path.append(str(Path(__file__).parent.parent))

try:
    from agent.core.agent import CameraAgent, AgentConfig
except ImportError:
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print("–ú–æ–¥—É–ª—å agent –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
    CameraAgent = None
    AgentConfig = None


class CameraAgentDemo:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã Camera Agent"""
    
    def __init__(self):
        self.agents = []
        self.running = False
    
    def create_demo_config(self, camera_model: str) -> AgentConfig:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        
        configs = {
            "dahua-2449": AgentConfig(
                agent_id=f"dahua-2449-{int(time.time())}",
                cloud_server_url="ws://localhost:8080/agent",
                cloud_server_token="demo-token",
                camera_rtsp_url="rtsp://demo:demo@ipvmdemo.dyndns.org:5541/onvif-media/media.amp",
                camera_username="demo",
                camera_password="demo",
                connection_timeout=30,
                reconnect_interval=10,
                heartbeat_interval=30,
                stream_quality="medium",
                buffer_size=1024 * 1024,
                encryption_enabled=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è –¥–µ–º–æ
                ssl_verify=False,
                log_level="INFO",
                log_file=None
            ),
            "hikvision-ds2cd": AgentConfig(
                agent_id=f"hikvision-ds2cd-{int(time.time())}",
                cloud_server_url="ws://localhost:8080/agent",
                cloud_server_token="demo-token",
                camera_rtsp_url="rtsp://demo:demo@ipvmdemo.dyndns.org:5541/onvif-media/media.amp",
                camera_username="demo",
                camera_password="demo",
                connection_timeout=30,
                reconnect_interval=10,
                heartbeat_interval=30,
                stream_quality="high",
                buffer_size=2 * 1024 * 1024,
                encryption_enabled=False,
                ssl_verify=False,
                log_level="DEBUG",
                log_file="demo_hikvision.log"
            ),
            "axis-m30": AgentConfig(
                agent_id=f"axis-m30-{int(time.time())}",
                cloud_server_url="ws://localhost:8080/agent",
                cloud_server_token="demo-token",
                camera_rtsp_url="rtsp://demo:demo@ipvmdemo.dyndns.org:5541/onvif-media/media.amp",
                camera_username="demo",
                camera_password="demo",
                connection_timeout=30,
                reconnect_interval=10,
                heartbeat_interval=30,
                stream_quality="medium",
                buffer_size=1024 * 1024,
                encryption_enabled=False,
                ssl_verify=False,
                log_level="INFO",
                log_file="demo_axis.log"
            )
        }
        
        return configs.get(camera_model, configs["dahua-2449"])
    
    async def start_agent(self, camera_model: str):
        """–ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞–º–µ—Ä—ã"""
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫ Camera Agent –¥–ª—è {camera_model}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = self.create_demo_config(camera_model)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞
        agent = CameraAgent(config)
        
        try:
            await agent.start()
            self.agents.append(agent)
            
            print(f"‚úÖ Agent {config.agent_id} –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: {config.cloud_server_url}")
            print(f"üé• RTSP –ø–æ—Ç–æ–∫: {config.camera_rtsp_url}")
            
            return agent
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞ {camera_model}: {e}")
            return None
    
    async def run_demo(self, camera_models: list):
        """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏"""
        
        print("üé• –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Camera Agent –¥–ª—è IP-–∫–∞–º–µ—Ä")
        print("=" * 50)
        
        self.running = True
        
        # –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–æ–≤
        for model in camera_models:
            agent = await self.start_agent(model)
            if agent:
                print(f"‚úÖ {model} –ø–æ–¥–∫–ª—é—á–µ–Ω")
            else:
                print(f"‚ùå {model} –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å")
            
            await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
        
        print(f"\nüìä –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–æ–≤:")
        print("-" * 30)
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–≥–µ–Ω—Ç–æ–≤
        try:
            while self.running:
                for i, agent in enumerate(self.agents):
                    if agent:
                        status = agent.get_status()
                        print(f"Agent {i+1}: {status['agent_id'][:12]}... | "
                              f"Status: {status['status']} | "
                              f"Uptime: {status['uptime']:.1f}s | "
                              f"Buffer: {status['buffer_size']}")
                
                print("-" * 30)
                await asyncio.sleep(10)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                
        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")
            self.running = False
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤...")
        for agent in self.agents:
            if agent:
                await agent.stop()
        
        print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    async def test_single_agent(self, camera_model: str, duration: int = 60):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
        
        print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ {camera_model} –≤ —Ç–µ—á–µ–Ω–∏–µ {duration} —Å–µ–∫—É–Ω–¥")
        
        agent = await self.start_agent(camera_model)
        if not agent:
            return False
        
        try:
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ç–µ—á–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            start_time = time.time()
            while time.time() - start_time < duration:
                status = agent.get_status()
                stats = status['stats']
                
                print(f"‚è±Ô∏è  {time.time() - start_time:.1f}s | "
                      f"Status: {status['status']} | "
                      f"Sent: {stats['bytes_sent']} bytes | "
                      f"Lost: {stats['packets_lost']} | "
                      f"Reconnects: {stats['reconnections']}")
                
                await asyncio.sleep(5)
            
            return True
            
        except KeyboardInterrupt:
            print("\nüõë –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False
        
        finally:
            await agent.stop()
    
    def show_supported_cameras(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–º–µ—Ä—ã"""
        
        cameras = {
            "dahua-2449": {
                "name": "Dahua IPC-HFW2449",
                "type": "4MP –∫—É–ø–æ–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞",
                "platform": "Linux ARM",
                "rtsp_port": 554,
                "features": ["4MP", "Night Vision", "Motion Detection"]
            },
            "hikvision-ds2cd": {
                "name": "Hikvision DS-2CD2043",
                "type": "4MP –∫—É–ø–æ–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞", 
                "platform": "Linux ARM",
                "rtsp_port": 554,
                "features": ["4MP", "WDR", "ONVIF"]
            },
            "axis-m30": {
                "name": "Axis M3046-V",
                "type": "4MP —Å–µ—Ç–µ–≤–∞—è –∫–∞–º–µ—Ä–∞",
                "platform": "Linux ARM",
                "rtsp_port": 554,
                "features": ["4MP", "H.264", "Edge Storage"]
            }
        }
        
        print("üì∑ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–º–µ—Ä—ã:")
        print("=" * 60)
        
        for model, info in cameras.items():
            print(f"üîπ {model}")
            print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {info['name']}")
            print(f"   –¢–∏–ø: {info['type']}")
            print(f"   –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {info['platform']}")
            print(f"   RTSP –ø–æ—Ä—Ç: {info['rtsp_port']}")
            print(f"   –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: {', '.join(info['features'])}")
            print()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    parser = argparse.ArgumentParser(description="–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Camera Agent")
    parser.add_argument("--camera", help="–ú–æ–¥–µ–ª—å –∫–∞–º–µ—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    parser.add_argument("--duration", type=int, default=60, help="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞ (—Å–µ–∫—É–Ω–¥—ã)")
    parser.add_argument("--list", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–º–µ—Ä—ã")
    parser.add_argument("--demo", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–º–æ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–∞–º–µ—Ä–∞–º–∏")
    
    args = parser.parse_args()
    
    demo = CameraAgentDemo()
    
    if args.list:
        demo.show_supported_cameras()
        return
    
    if args.demo:
        # –î–µ–º–æ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–∞–º–µ—Ä–∞–º–∏
        cameras = ["dahua-2449", "hikvision-ds2cd", "axis-m30"]
        await demo.run_demo(cameras)
        return
    
    if args.camera:
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –∫–∞–º–µ—Ä—ã
        await demo.test_single_agent(args.camera, args.duration)
        return
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    print("üé• Camera Agent Demo")
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
    print("1. –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–º–µ—Ä—ã")
    print("2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –∫–∞–º–µ—Ä—ã")
    print("3. –î–µ–º–æ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–∞–º–µ—Ä–∞–º–∏")
    
    try:
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ").strip()
        
        if choice == "1":
            demo.show_supported_cameras()
        
        elif choice == "2":
            camera = input("–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –∫–∞–º–µ—Ä—ã (dahua-2449, hikvision-ds2cd, axis-m30): ").strip()
            duration = int(input("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 60): ") or "60")
            await demo.test_single_agent(camera, duration)
        
        elif choice == "3":
            await demo.run_demo(["dahua-2449", "hikvision-ds2cd", "axis-m30"])
        
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    asyncio.run(main())
